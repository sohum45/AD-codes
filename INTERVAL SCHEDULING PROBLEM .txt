INTERVAL SCHEDULING PROBLEM :


import java.util.Arrays;
import java.util.Comparator;

class Interval {
    int start;
    int end;

    public Interval(int start, int end) {
        this.start = start;
        this.end = end;
    }

    @Override
    public String toString() {
        return "[" + start + ", " + end + "]";
    }
}

public class IntervalScheduling {

    public static Interval[] intervalScheduling(Interval[] intervals) {
        // Sort intervals by their end times
        Arrays.sort(intervals, Comparator.comparingInt(interval -> interval.end));

        // Create a list to hold the selected intervals
        ArrayList<Interval> selectedIntervals = new ArrayList<>();

        // Select the first interval and add it to the list
        Interval lastSelectedInterval = intervals[0];
        selectedIntervals.add(lastSelectedInterval);

        // Iterate over the remaining intervals
        for (int i = 1; i < intervals.length; i++) {
            // If the current interval does not overlap with the last selected interval, select it
            if (intervals[i].start >= lastSelectedInterval.end) {
                selectedIntervals.add(intervals[i]);
                lastSelectedInterval = intervals[i];
            }
        }

        // Convert the list to an array and return it
        return selectedIntervals.toArray(new Interval[0]);
    }

    public static void main(String[] args) {
        Interval[] intervals = {
            new Interval(1, 3),
            new Interval(2, 4),
            new Interval(3, 5),
            new Interval(0, 6),
            new Interval(5, 7),
            new Interval(8, 9),
            new Interval(5, 9)
        };

        Interval[] selectedIntervals = intervalScheduling(intervals);

        System.out.println("Selected intervals for maximum non-overlapping intervals:");
        for (Interval interval : selectedIntervals) {
            System.out.println(interval);
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Fractional Knapsack problem java code : 

import java.util.Arrays;
import java.util.Comparator;

class Item {
    int profit;
    int weight;

    public Item(int profit, int weight) {
        this.profit = profit;
        this.weight = weight;
    }
}

public class FractionalKnapsack {
    public static double fractionalKnapsack(int W, Item[] arr) {
        Arrays.sort(arr, Comparator.comparingDouble(item -> (double) item.profit / item.weight));

        double totalProfit = 0;
        int remainingCapacity = W;

        for (Item item : arr) {
            if (remainingCapacity <= 0) break;

            int weightTaken = Math.min(remainingCapacity, item.weight);
            totalProfit += (double) weightTaken * item.profit / item.weight;
            remainingCapacity -= weightTaken;
        }

        return totalProfit;
    }

    public static void main(String[] args) {
        Item[] items = {
            new Item(60, 10),
            new Item(100, 20),
            new Item(120, 30)
        };

        int capacity = 50;
        double maxProfit = fractionalKnapsack(capacity, items);

        System.out.println("Maximum profit: " + maxProfit);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

HUFFMAN CODING 

import java.util.PriorityQueue;
import java.util.HashMap;

class HuffmanNode implements Comparable<HuffmanNode> {
    char character;
    int frequency;
    HuffmanNode left;
    HuffmanNode right;

    public HuffmanNode(char character, int frequency) {
        this.character = character;
        this.frequency = frequency;
    }

    @Override
    public int compareTo(HuffmanNode other) {
        return this.frequency - other.frequency;
    }
}

public class HuffmanCoding {
    public static void main(String[] args) {
        String inputText = "abracadabra"; // Example input text

        HashMap<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : inputText.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }

        PriorityQueue<HuffmanNode> minHeap = new PriorityQueue<>();
        for (char c : frequencyMap.keySet()) {
            minHeap.offer(new HuffmanNode(c, frequencyMap.get(c)));
        }

        while (minHeap.size() > 1) {
            HuffmanNode left = minHeap.poll();
            HuffmanNode right = minHeap.poll();
            HuffmanNode merged = new HuffmanNode('\0', left.frequency + right.frequency);
            merged.left = left;
            merged.right = right;
            minHeap.offer(merged);
        }

        HuffmanNode root = minHeap.poll();

        // Print Huffman codes
        printHuffmanCodes(root, "");

        // Encode the input text using Huffman codes
        StringBuilder encodedText = new StringBuilder();
        for (char c : inputText.toCharArray()) {
            encodedText.append(huffmanCodes.get(c));
        }

        System.out.println("Encoded text: " + encodedText);
    }

    static HashMap<Character, String> huffmanCodes = new HashMap<>();

    private static void printHuffmanCodes(HuffmanNode node, String code) {
        if (node == null) return;

        if (node.character != '\0') {
            huffmanCodes.put(node.character, code);
            System.out.println(node.character + ": " + code);
        }

        printHuffmanCodes(node.left, code + "0");
        printHuffmanCodes(node.right, code + "1");
    }
}



