Write java code on MST :

import java.util.*;

class Edge implements Comparable<Edge> {
    int source, destination, weight;

    public Edge(int source, int destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }

    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
}

class Subset {
    int parent, rank;
}

public class KruskalMST {
    int vertices, edges;
    Edge[] edge;

    KruskalMST(int vertices, int edges) {
        this.vertices = vertices;
        this.edges = edges;
        edge = new Edge[edges];
        for (int i = 0; i < edges; ++i) {
            edge[i] = new Edge(0, 0, 0);
        }
    }

    int find(Subset[] subsets, int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }

    void union(Subset[] subsets, int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);

        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }

    void kruskalMST() {
        Edge[] result = new Edge[vertices];
        int e = 0;
        int i = 0;
        for (i = 0; i < vertices; ++i)
            result[i] = new Edge(0, 0, 0);

        Arrays.sort(edge);

        Subset[] subsets = new Subset[vertices];
        for (i = 0; i < vertices; ++i)
            subsets[i] = new Subset();

        for (int v = 0; v < vertices; ++v) {
            subsets[v].parent = v;
            subsets[v].rank = 0;
        }

        i = 0;

        while (e < vertices - 1) {
            Edge next_edge = edge[i++];

            int x = find(subsets, next_edge.source);
            int y = find(subsets, next_edge.destination);

            if (x != y) {
                result[e++] = next_edge;
                union(subsets, x, y);
            }
        }

        System.out.println("Following are the edges in the constructed MST");
        int minimumCost = 0;
        for (i = 0; i < e; ++i) {
            System.out.println(result[i].source + " -- " +
                    result[i].destination + " == " + result[i].weight);
            minimumCost += result[i].weight;
        }
        System.out.println("Minimum Cost Spanning Tree " + minimumCost);
    }

    public static void main(String[] args) {
        int vertices = 4;
        int edges = 5;
        KruskalMST graph = new KruskalMST(vertices, edges);

        graph.edge[0] = new Edge(0, 1, 10);
        graph.edge[1] = new Edge(0, 2, 6);
        graph.edge[2] = new Edge(0, 3, 5);
        graph.edge[3] = new Edge(1, 3, 15);
        graph.edge[4] = new Edge(2, 3, 4);

        graph.kruskalMST();
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Write a code on Dijkstra Algorithm

import java.util.*;

class Node {
    String name;
    Set<Node> neighbors = new HashSet<>();
    Map<Node, Integer> weights = new HashMap<>();

    public Node(String name) {
        this.name = name;
    }

    public void addNeighbor(Node neighbor, int weight) {
        neighbors.add(neighbor);
        weights.put(neighbor, weight);
    }
}

public class DijkstraExample {
    public static void main(String[] args) {
        // Create nodes and edges
        Node A = new Node("A");
        Node B = new Node("B");
        Node C = new Node("C");

        A.addNeighbor(B, 10);
        A.addNeighbor(C, 15);
        B.addNeighbor(C, 5);

        // Initialize distances
        Map<Node, Integer> distances = new HashMap<>();
        for (Node node : Arrays.asList(A, B, C)) {
            distances.put(node, Integer.MAX_VALUE);
        }
        distances.put(A, 0);

        // Process nodes
        Set<Node> unsettled = new HashSet<>();
        unsettled.add(A);

        while (!unsettled.isEmpty()) {
            Node current = unsettled.stream()
                    .min(Comparator.comparing(distances::get))
                    .orElseThrow();

            unsettled.remove(current);

            for (Node neighbor : current.neighbors) {
                int newDistance = distances.get(current) + current.weights.get(neighbor);
                if (newDistance < distances.get(neighbor)) {
                    distances.put(neighbor, newDistance);
                    unsettled.add(neighbor);
                }
            }
        }

        // Print shortest distances
        for (Node node : Arrays.asList(A, B, C)) {
            System.out.println("Shortest distance from A to " + node.name + ": " + distances.get(node));
        }
    }
}
