Weighted Interval Scheduling Implementation in Java

import java.util.Arrays;
import java.util.Comparator;

class Interval {
    int start;
    int end;
    int weight;

    public Interval(int start, int end, int weight) {
        this.start = start;
        this.end = end;
        this.weight = weight;
    }
}

public class WeightedIntervalScheduling {

    // Function to find the maximum weight of non-overlapping intervals
    public static int weightedIntervalScheduling(Interval[] intervals) {
        // Sort intervals by their end times
        Arrays.sort(intervals, Comparator.comparingInt(interval -> interval.end));

        // Auxiliary array to store the maximum weight up to each interval
        int[] dp = new int[intervals.length];
        dp[0] = intervals[0].weight;

        // Fill the dp array
        for (int i = 1; i < intervals.length; i++) {
            int includeWeight = intervals[i].weight;
            int lastNonConflicting = findLastNonConflicting(intervals, i);
            if (lastNonConflicting != -1) {
                includeWeight += dp[lastNonConflicting];
            }
            dp[i] = Math.max(includeWeight, dp[i - 1]);
        }

        return dp[intervals.length - 1];
    }

    // Function to find the last non-conflicting interval with the current interval
    private static int findLastNonConflicting(Interval[] intervals, int i) {
        for (int j = i - 1; j >= 0; j--) {
            if (intervals[j].end <= intervals[i].start) {
                return j;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        Interval[] intervals = {
            new Interval(1, 3, 5),
            new Interval(2, 5, 6),
            new Interval(4, 6, 5),
            new Interval(6, 7, 4),
            new Interval(5, 8, 11),
            new Interval(7, 9, 2)
        };

        System.out.println("Maximum weight of non-overlapping intervals: " + weightedIntervalScheduling(intervals));
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Longest Common Subsequence java code 

public class LongestCommonSubsequence {

    // Function to find the length of longest common subsequence
    public static int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();

        // Create a DP table
        int[][] dp = new int[m + 1][n + 1];

        // Fill the DP table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        // The length of LCS will be found in dp[m][n]
        return dp[m][n];
    }

    public static void main(String[] args) {
        String text1 = "abcde";
        String text2 = "ace";

        System.out.println("Length of Longest Common Subsequence: " + longestCommonSubsequence(text1, text2));
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Coin Exchange java code 

import java.util.Arrays;

public class CoinExchange {

    // Function to find the minimum number of coins required
    public static int coinExchange(int[] coins, int amount) {
        // Create an array to store minimum number of coins for each amount from 0 to amount
        int[] dp = new int[amount + 1];

        // Initialize the dp array with a large number (infinity)
        Arrays.fill(dp, Integer.MAX_VALUE);

        // Base case: 0 coins are needed to make amount 0
        dp[0] = 0;

        // Compute minimum number of coins required for each amount from 1 to amount
        for (int i = 1; i <= amount; i++) {
            for (int coin : coins) {
                if (coin <= i && dp[i - coin] != Integer.MAX_VALUE) {
                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);
                }
            }
        }

        // If dp[amount] is still Integer.MAX_VALUE, it means amount cannot be formed using given coins
        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
    }

    public static void main(String[] args) {
        int[] coins = {1, 2, 5};
        int amount = 11;

        int minCoins = coinExchange(coins, amount);
        System.out.println("Minimum number of coins required to make " + amount + " cents: " + minCoins);
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Matrix Chain Multiplication 

public class MatrixChainMultiplication {

    // Function to find the minimum number of scalar multiplications
    public static int matrixChainMultiplication(int[] dimensions) {
        int n = dimensions.length - 1; // number of matrices
        int[][] dp = new int[n][n];

        // Base case: Single matrix does not require any multiplication
        for (int i = 0; i < n; i++) {
            dp[i][i] = 0;
        }

        // Fill the dp table
        // l is chain length
        for (int l = 2; l <= n; l++) {
            for (int i = 0; i < n - l + 1; i++) {
                int j = i + l - 1;
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = i; k < j; k++) {
                    int q = dp[i][k] + dp[k + 1][j] + dimensions[i] * dimensions[k + 1] * dimensions[j + 1];
                    if (q < dp[i][j]) {
                        dp[i][j] = q;
                    }
                }
            }
        }

        // Minimum scalar multiplications needed to multiply matrices from 1 to n
        return dp[0][n - 1];
    }

    public static void main(String[] args) {
        int[] dimensions = {10, 30, 5, 60}; // Example dimensions of matrices

        int minMultiplications = matrixChainMultiplication(dimensions);
        System.out.println("Minimum scalar multiplications needed: " + minMultiplications);
    }
}
