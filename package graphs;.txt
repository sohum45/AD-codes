package graphs;
import java.util.*;

public class bfsDfs {

    static class Edge {
        int src, dest;
        Edge(int src, int dest) {
            this.src = src;
            this.dest = dest;
        }
    }
        public static void create(ArrayList<Edge>graph[]){
            for(int i=0;i<graph.length;i++){
                graph[i] = new ArrayList<Edge>(); // creation of empty arraylist
            }
            graph[0].add(new Edge(0,1));
            graph[0].add(new Edge(0,3));
            graph[1].add(new Edge(1,3));
            graph[1].add(new Edge(1,2));
            graph[1].add(new Edge(0,1));
            graph[2].add(new Edge(2,3));
            graph[2].add(new Edge(1,2));
            graph[3].add(new Edge(3,2));
        }
    public static void bfs(ArrayList<Edge>graph[] , int V){
        Queue<Integer> q = new LinkedList<>();
        boolean visited[] = new boolean[V];
        q.add(0);
        while(!q.isEmpty()){
            int curr = q.remove();
            if(visited[curr] == false){
                System.out.print(curr+" ");
                visited[curr] = true;
                for(int i=0;i<graph[curr].size();i++){
                    Edge e = graph[curr].get(i);
                    q.add(e.dest);
                }
            }
        }
    }

    public static void dfs(ArrayList<Edge>graph[], int curr, boolean vis[]){
        System.out.print(curr + " ");
        vis[curr] = true;
        for (int i=0;i<graph[curr].size();i++){
            Edge e = graph[curr].get(i);
            if(vis[e.dest] == false){
            dfs(graph,e.dest,vis);
            }
        }
    }
    public static void main(String[] args) {
        int V =4;
        ArrayList<Edge>graph[] = new ArrayList[V];
        create(graph);
        boolean vis[] = new boolean[V];
        // bfs(graph,V);

        dfs(graph,0,vis);
        System.out.println();
    }
}
